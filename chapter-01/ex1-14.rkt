#lang sicp

; The tree illustrating the process generated by the count-change procedure for 11 cents.
;
;         (count-change 11)
;                |
;            (cc 11 5)
;            /       \
;          (cc 11 4) (cc -39 5)
;          /       \           \
;        (cc 11 3) (cc -14 4)   0
;        /        \          \
;      (cc 11 2)  (cc 1 3)    0
;      /       \        |\_______
;    (cc 11 1) (cc 6 2) (cc 1 2)(cc -2 3)_____________________
;    /      \         |\______ \_______________               \ 
;  (cc 11 0)(cc 10 1)(cc 6 1)(cc 1 2)(cc 1 1)(cc -4 2)________ 0
;  /        /  |      |      /      \	   | \_________       \
; 0 (cc 10 0)(cc 9 1) |   (cc 1 1) (cc -4 2)(cc 1 0) (cc 0 1)  0
;   /        /    |    \   |	 \         \  \             \
;  0   (cc 9 0)(cc 8 1) \ (cc 1 0)(c 0 1)   0  0             1
;      /       /   |	 |\______ \      \
;     0	(cc 8 0)(cc 7 1)(cc 6 0) | 0      1
;       /       /   |     |      |
;      0 (cc 7 0)(cc 6 1) 0  (cc 5 1)
;       /       /    |        |     \
;      0 (cc 6 0)(cc 5 1)(cc 5 0)(cc 4 1)
;        /       /     |   |      |     \
;       0 (cc 5 0) (c 4 1) 0 (cc 4 0) (cc 3 1)
;         /        /    |     |        |     \
;        0  (cc 4 0) (cc 3 1) 0	 (cc 3 0)   (cc 2 1)		
;           /        /   |        |         /      \
;          0  (cc 3 0)(cc 2 1)    0   (cc 2 0)    (cc 1 1)
;             /       /   |            |          /      \	
;            0  (cc 2 0) (cc 1 1)      0     (cc 1 0) (cc 0 1)
;               /        /  |                 /              \
;              0  (cc 1 0) (cc 0 1)          0                1
;                 /        /
;                0        1
;
; The order of growth of the space is O(k), since the maximum depth is k.
; The order of growth of the number of steps is O(kⁿ).
; Indeed, since (cc k 1) → O(k), and (cc k 2) ≡ (cc k 1) + (cc (- k 5)) → O(k²),
; per induction, we have that (cc k n) → O(kⁿ).

(define (count-change amount)
  (define (first-denomination kinds-of-coins)
	(cond ((= kinds-of-coins 1) 1)
		  ((= kinds-of-coins 2) 5)
		  ((= kinds-of-coins 3) 10)
		  ((= kinds-of-coins 4) 25)
		  ((= kinds-of-coins 5) 50)))
  (define (cc amount kinds-of-coins)
	(cond ((= amount 0) 1)
		  ((or (< amount 0)
			   (= kinds-of-coins 0))
		   0)
		  (else
			(+ (cc amount (- kinds-of-coins 1))
			   (cc (- amount (first-denomination
							   kinds-of-coins))
				   kinds-of-coins)))))
  (cc amount 5))

(count-change 11)
